{"version":3,"sources":["../src/connect.ts"],"sourcesContent":["import type { ConnectOptions } from 'mongoose'\nimport type { Connect } from 'payload'\n\nimport mongoose from 'mongoose'\nimport { defaultBeginTransaction } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nexport const connect: Connect = async function connect(\n  this: MongooseAdapter,\n  options = {\n    hotReload: false,\n  },\n) {\n  const { hotReload } = options\n\n  if (this.url === false) {\n    return\n  }\n\n  if (typeof this.url !== 'string') {\n    throw new Error('Error: missing MongoDB connection URL.')\n  }\n\n  const urlToConnect = this.url\n\n  const connectionOptions: { useFacet: undefined } & ConnectOptions = {\n    autoIndex: true,\n    ...this.connectOptions,\n    useFacet: undefined,\n  }\n\n  if (hotReload) {\n    connectionOptions.autoIndex = false\n  }\n\n  try {\n    if (!this.connection) {\n      this.connection = await mongoose.createConnection(urlToConnect, connectionOptions).asPromise()\n    }\n\n    await this.connection.openUri(urlToConnect, connectionOptions)\n\n    if (this.useAlternativeDropDatabase) {\n      if (this.connection.db) {\n        // Firestore doesn't support dropDatabase, so we monkey patch\n        // dropDatabase to delete all documents from all collections instead\n        this.connection.db.dropDatabase = async function (): Promise<boolean> {\n          const existingCollections = await this.listCollections().toArray()\n          await Promise.all(\n            existingCollections.map(async (collectionInfo) => {\n              const collection = this.collection(collectionInfo.name)\n              await collection.deleteMany({})\n            }),\n          )\n          return true\n        }\n        this.connection.dropDatabase = async function () {\n          await this.db?.dropDatabase()\n        }\n      }\n    }\n\n    // If we are running a replica set with MongoDB Memory Server,\n    // wait until the replica set elects a primary before proceeding\n    if (this.mongoMemoryServer) {\n      this.payload.logger.info(\n        'Waiting for MongoDB Memory Server replica set to elect a primary...',\n      )\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n    }\n\n    const client = this.connection.getClient()\n\n    if (!client.options.replicaSet) {\n      this.transactionOptions = false\n      this.beginTransaction = defaultBeginTransaction()\n    }\n\n    if (!hotReload) {\n      if (process.env.PAYLOAD_DROP_DATABASE === 'true') {\n        this.payload.logger.info('---- DROPPING DATABASE ----')\n        await this.connection.dropDatabase()\n\n        this.payload.logger.info('---- DROPPED DATABASE ----')\n      }\n    }\n\n    if (this.ensureIndexes) {\n      await Promise.all(\n        this.payload.config.collections.map(async (coll) => {\n          await this.collections[coll.slug]?.ensureIndexes()\n        }),\n      )\n    }\n\n    if (process.env.NODE_ENV === 'production' && this.prodMigrations) {\n      await this.migrate({ migrations: this.prodMigrations })\n    }\n  } catch (err) {\n    let msg = `Error: cannot connect to MongoDB.`\n\n    if (typeof err === 'object' && err && 'message' in err && typeof err.message === 'string') {\n      msg = `${msg} Details: ${err.message}`\n    }\n\n    this.payload.logger.error({\n      err,\n      msg,\n    })\n    process.exit(1)\n  }\n}\n"],"names":["mongoose","defaultBeginTransaction","connect","options","hotReload","url","Error","urlToConnect","connectionOptions","autoIndex","connectOptions","useFacet","undefined","connection","createConnection","asPromise","openUri","useAlternativeDropDatabase","db","dropDatabase","existingCollections","listCollections","toArray","Promise","all","map","collectionInfo","collection","name","deleteMany","mongoMemoryServer","payload","logger","info","resolve","setTimeout","client","getClient","replicaSet","transactionOptions","beginTransaction","process","env","PAYLOAD_DROP_DATABASE","ensureIndexes","config","collections","coll","slug","NODE_ENV","prodMigrations","migrate","migrations","err","msg","message","error","exit"],"mappings":"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"}