{"version":3,"sources":["../src/updateJobs.ts"],"sourcesContent":["import type { MongooseUpdateQueryOptions, UpdateQuery } from 'mongoose'\nimport type { Job, UpdateJobs, Where } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { buildSortParam } from './queries/buildSortParam.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { handleError } from './utilities/handleError.js'\nimport { transform } from './utilities/transform.js'\n\nexport const updateJobs: UpdateJobs = async function updateMany(\n  this: MongooseAdapter,\n  { id, data, limit, req, returning, sort: sortArg, where: whereArg },\n) {\n  if (\n    !(data?.log as object[])?.length &&\n    !(data.log && typeof data.log === 'object' && '$push' in data.log)\n  ) {\n    delete data.log\n  }\n\n  const where = id ? { id: { equals: id } } : (whereArg as Where)\n\n  const { collectionConfig, Model } = getCollection({\n    adapter: this,\n    collectionSlug: 'payload-jobs',\n  })\n\n  const sort: Record<string, unknown> | undefined = buildSortParam({\n    adapter: this,\n    config: this.payload.config,\n    fields: collectionConfig.flattenedFields,\n    sort: sortArg || collectionConfig.defaultSort,\n    timestamps: true,\n  })\n\n  const options: MongooseUpdateQueryOptions = {\n    lean: true,\n    new: true,\n    session: await getSession(this, req),\n    // Timestamps are manually added by the write transform\n    timestamps: false,\n  }\n\n  let query = await buildQuery({\n    adapter: this,\n    collectionSlug: collectionConfig.slug,\n    fields: collectionConfig.flattenedFields,\n    where,\n  })\n\n  let updateData: UpdateQuery<any> = data\n\n  const $inc: Record<string, number> = {}\n  const $push: Record<string, { $each: any[] } | any> = {}\n  const $addToSet: Record<string, { $each: any[] } | any> = {}\n  const $pull: Record<string, { $in: any[] } | any> = {}\n\n  transform({\n    $addToSet,\n    $inc,\n    $pull,\n    $push,\n    adapter: this,\n    data,\n    fields: collectionConfig.fields,\n    operation: 'write',\n  })\n\n  const updateOps: UpdateQuery<any> = {}\n\n  if (Object.keys($inc).length) {\n    updateOps.$inc = $inc\n  }\n  if (Object.keys($push).length) {\n    updateOps.$push = $push\n  }\n  if (Object.keys($addToSet).length) {\n    updateOps.$addToSet = $addToSet\n  }\n  if (Object.keys($pull).length) {\n    updateOps.$pull = $pull\n  }\n  if (Object.keys(updateOps).length) {\n    updateOps.$set = updateData\n    updateData = updateOps\n  }\n\n  let result: Job[] = []\n\n  try {\n    if (id) {\n      if (returning === false) {\n        await Model.updateOne(query, updateData, options)\n        transform({ adapter: this, data, fields: collectionConfig.fields, operation: 'read' })\n\n        return null\n      } else {\n        const doc = await Model.findOneAndUpdate(query, updateData, options)\n        result = doc ? [doc] : []\n      }\n    } else {\n      if (typeof limit === 'number' && limit > 0) {\n        const documentsToUpdate = await Model.find(\n          query,\n          {},\n          { ...options, limit, projection: { _id: 1 }, sort },\n        )\n        if (documentsToUpdate.length === 0) {\n          return null\n        }\n\n        query = { _id: { $in: documentsToUpdate.map((doc) => doc._id) } }\n      }\n\n      await Model.updateMany(query, updateData, options)\n\n      if (returning === false) {\n        return null\n      }\n\n      result = await Model.find(\n        query,\n        {},\n        {\n          ...options,\n          sort,\n        },\n      )\n    }\n  } catch (error) {\n    handleError({ collection: collectionConfig.slug, error, req })\n  }\n\n  transform({\n    adapter: this,\n    data: result,\n    fields: collectionConfig.fields,\n    operation: 'read',\n  })\n\n  return result\n}\n"],"names":["buildQuery","buildSortParam","getCollection","getSession","handleError","transform","updateJobs","updateMany","id","data","limit","req","returning","sort","sortArg","where","whereArg","log","length","equals","collectionConfig","Model","adapter","collectionSlug","config","payload","fields","flattenedFields","defaultSort","timestamps","options","lean","new","session","query","slug","updateData","$inc","$push","$addToSet","$pull","operation","updateOps","Object","keys","$set","result","updateOne","doc","findOneAndUpdate","documentsToUpdate","find","projection","_id","$in","map","error","collection"],"mappings":"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"}