{"version":3,"sources":["../src/createVersion.ts"],"sourcesContent":["import { buildVersionCollectionFields, type CreateVersion } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { transform } from './utilities/transform.js'\n\nexport const createVersion: CreateVersion = async function createVersion(\n  this: MongooseAdapter,\n  {\n    autosave,\n    collectionSlug,\n    createdAt,\n    parent,\n    publishedLocale,\n    req,\n    returning,\n    snapshot,\n    updatedAt,\n    versionData,\n  },\n) {\n  const { collectionConfig, Model } = getCollection({\n    adapter: this,\n    collectionSlug,\n    versions: true,\n  })\n\n  const options = {\n    session: await getSession(this, req),\n    // Timestamps are manually added by the write transform\n    timestamps: false,\n  }\n\n  const data = {\n    autosave,\n    createdAt,\n    latest: true,\n    parent,\n    publishedLocale,\n    snapshot,\n    updatedAt,\n    version: versionData,\n  }\n  if (!data.createdAt) {\n    data.createdAt = new Date().toISOString()\n  }\n\n  const fields = buildVersionCollectionFields(this.payload.config, collectionConfig)\n\n  transform({\n    adapter: this,\n    data,\n    fields,\n    operation: 'write',\n  })\n\n  let [doc] = await Model.create([data], options, req)\n\n  const parentQuery = {\n    $or: [\n      {\n        parent: {\n          $eq: data.parent,\n        },\n      },\n    ],\n  }\n\n  await Model.updateMany(\n    {\n      $and: [\n        {\n          _id: {\n            $ne: doc._id,\n          },\n        },\n        parentQuery,\n        {\n          latest: {\n            $eq: true,\n          },\n        },\n        {\n          updatedAt: {\n            $lt: new Date(doc.updatedAt),\n          },\n        },\n      ],\n    },\n    { $unset: { latest: 1 } },\n    options,\n  )\n\n  if (returning === false) {\n    return null\n  }\n\n  doc = doc.toObject()\n\n  transform({\n    adapter: this,\n    data: doc,\n    fields,\n    operation: 'read',\n  })\n\n  return doc\n}\n"],"names":["buildVersionCollectionFields","getCollection","getSession","transform","createVersion","autosave","collectionSlug","createdAt","parent","publishedLocale","req","returning","snapshot","updatedAt","versionData","collectionConfig","Model","adapter","versions","options","session","timestamps","data","latest","version","Date","toISOString","fields","payload","config","operation","doc","create","parentQuery","$or","$eq","updateMany","$and","_id","$ne","$lt","$unset","toObject"],"mappings":"AAAA,SAASA,4BAA4B,QAA4B,UAAS;AAI1E,SAASC,aAAa,QAAQ,2BAA0B;AACxD,SAASC,UAAU,QAAQ,4BAA2B;AACtD,SAASC,SAAS,QAAQ,2BAA0B;AAEpD,OAAO,MAAMC,gBAA+B,eAAeA,cAEzD,EACEC,QAAQ,EACRC,cAAc,EACdC,SAAS,EACTC,MAAM,EACNC,eAAe,EACfC,GAAG,EACHC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACZ;IAED,MAAM,EAAEC,gBAAgB,EAAEC,KAAK,EAAE,GAAGf,cAAc;QAChDgB,SAAS,IAAI;QACbX;QACAY,UAAU;IACZ;IAEA,MAAMC,UAAU;QACdC,SAAS,MAAMlB,WAAW,IAAI,EAAEQ;QAChC,uDAAuD;QACvDW,YAAY;IACd;IAEA,MAAMC,OAAO;QACXjB;QACAE;QACAgB,QAAQ;QACRf;QACAC;QACAG;QACAC;QACAW,SAASV;IACX;IACA,IAAI,CAACQ,KAAKf,SAAS,EAAE;QACnBe,KAAKf,SAAS,GAAG,IAAIkB,OAAOC,WAAW;IACzC;IAEA,MAAMC,SAAS3B,6BAA6B,IAAI,CAAC4B,OAAO,CAACC,MAAM,EAAEd;IAEjEZ,UAAU;QACRc,SAAS,IAAI;QACbK;QACAK;QACAG,WAAW;IACb;IAEA,IAAI,CAACC,IAAI,GAAG,MAAMf,MAAMgB,MAAM,CAAC;QAACV;KAAK,EAAEH,SAAST;IAEhD,MAAMuB,cAAc;QAClBC,KAAK;YACH;gBACE1B,QAAQ;oBACN2B,KAAKb,KAAKd,MAAM;gBAClB;YACF;SACD;IACH;IAEA,MAAMQ,MAAMoB,UAAU,CACpB;QACEC,MAAM;YACJ;gBACEC,KAAK;oBACHC,KAAKR,IAAIO,GAAG;gBACd;YACF;YACAL;YACA;gBACEV,QAAQ;oBACNY,KAAK;gBACP;YACF;YACA;gBACEtB,WAAW;oBACT2B,KAAK,IAAIf,KAAKM,IAAIlB,SAAS;gBAC7B;YACF;SACD;IACH,GACA;QAAE4B,QAAQ;YAAElB,QAAQ;QAAE;IAAE,GACxBJ;IAGF,IAAIR,cAAc,OAAO;QACvB,OAAO;IACT;IAEAoB,MAAMA,IAAIW,QAAQ;IAElBvC,UAAU;QACRc,SAAS,IAAI;QACbK,MAAMS;QACNJ;QACAG,WAAW;IACb;IAEA,OAAOC;AACT,EAAC"}