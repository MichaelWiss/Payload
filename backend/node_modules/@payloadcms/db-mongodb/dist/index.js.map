{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { CollationOptions, TransactionOptions } from 'mongodb'\nimport type { MongoMemoryReplSet } from 'mongodb-memory-server'\nimport type {\n  ClientSession,\n  Connection,\n  ConnectOptions,\n  QueryOptions,\n  SchemaOptions,\n} from 'mongoose'\nimport type {\n  BaseDatabaseAdapter,\n  CollectionSlug,\n  DatabaseAdapterObj,\n  Migration,\n  Payload,\n  TypeWithID,\n  TypeWithVersion,\n  UpdateGlobalArgs,\n  UpdateGlobalVersionArgs,\n  UpdateOneArgs,\n  UpdateVersionArgs,\n} from 'payload'\n\nimport fs from 'fs'\nimport mongoose from 'mongoose'\nimport path from 'path'\nimport { createDatabaseAdapter, defaultBeginTransaction } from 'payload'\n\nimport type { CollectionModel, GlobalModel, MigrateDownArgs, MigrateUpArgs } from './types.js'\n\nimport { connect } from './connect.js'\nimport { count } from './count.js'\nimport { countGlobalVersions } from './countGlobalVersions.js'\nimport { countVersions } from './countVersions.js'\nimport { create } from './create.js'\nimport { createGlobal } from './createGlobal.js'\nimport { createGlobalVersion } from './createGlobalVersion.js'\nimport { createMigration } from './createMigration.js'\nimport { createVersion } from './createVersion.js'\nimport { deleteMany } from './deleteMany.js'\nimport { deleteOne } from './deleteOne.js'\nimport { deleteVersions } from './deleteVersions.js'\nimport { destroy } from './destroy.js'\nimport { find } from './find.js'\nimport { findDistinct } from './findDistinct.js'\nimport { findGlobal } from './findGlobal.js'\nimport { findGlobalVersions } from './findGlobalVersions.js'\nimport { findOne } from './findOne.js'\nimport { findVersions } from './findVersions.js'\nimport { init } from './init.js'\nimport { migrateFresh } from './migrateFresh.js'\nimport { queryDrafts } from './queryDrafts.js'\nimport { beginTransaction } from './transactions/beginTransaction.js'\nimport { commitTransaction } from './transactions/commitTransaction.js'\nimport { rollbackTransaction } from './transactions/rollbackTransaction.js'\nimport { updateGlobal } from './updateGlobal.js'\nimport { updateGlobalVersion } from './updateGlobalVersion.js'\nimport { updateJobs } from './updateJobs.js'\nimport { updateMany } from './updateMany.js'\nimport { updateOne } from './updateOne.js'\nimport { updateVersion } from './updateVersion.js'\nimport { upsert } from './upsert.js'\n\nexport type { MigrateDownArgs, MigrateUpArgs } from './types.js'\n\nexport interface Args {\n  /**\n   * By default, Payload strips all additional keys from MongoDB data that don't exist\n   * in the Payload schema. If you have some data that you want to include to the result\n   * but it doesn't exist in Payload, you can enable this flag\n   * @default false\n   */\n  allowAdditionalKeys?: boolean\n  /**\n   * Enable this flag if you want to thread your own ID to create operation data, for example:\n   * ```ts\n   * import { Types } from 'mongoose'\n   *\n   * const id = new Types.ObjectId().toHexString()\n   * const doc = await payload.create({ collection: 'posts', data: {id, title: \"my title\"}})\n   * assertEq(doc.id, id)\n   * ```\n   */\n  allowIDOnCreate?: boolean\n  /** Set to false to disable auto-pluralization of collection names, Defaults to true */\n  autoPluralization?: boolean\n\n  /**\n   * If enabled, collation allows for language-specific rules for string comparison.\n   * This configuration can include the following options:\n   *\n   * - `strength` (number): Comparison level (1: Primary, 2: Secondary, 3: Tertiary (default), 4: Quaternary, 5: Identical)\n   * - `caseLevel` (boolean): Include case comparison at strength level 1 or 2.\n   * - `caseFirst` (string): Sort order of case differences during tertiary level comparisons (\"upper\", \"lower\", \"off\").\n   * - `numericOrdering` (boolean): Compare numeric strings as numbers.\n   * - `alternate` (string): Consider whitespace and punctuation as base characters (\"non-ignorable\", \"shifted\").\n   * - `maxVariable` (string): Characters considered ignorable when `alternate` is \"shifted\" (\"punct\", \"space\").\n   * - `backwards` (boolean): Sort strings with diacritics from back of the string.\n   * - `normalization` (boolean): Check if text requires normalization and perform normalization.\n   *\n   * Available on MongoDB version 3.4 and up.\n   * The locale that gets passed is your current project's locale but defaults to \"en\".\n   *\n   * Example:\n   * {\n   *   strength: 3\n   * }\n   *\n   * Defaults to disabled.\n   */\n  collation?: Omit<CollationOptions, 'locale'>\n\n  collectionsSchemaOptions?: Partial<Record<CollectionSlug, SchemaOptions>>\n  /** Extra configuration options */\n  connectOptions?: {\n    /**\n     * Set false to disable $facet aggregation in non-supporting databases, Defaults to true\n     * @deprecated Payload doesn't use `$facet` anymore anywhere.\n     */\n    useFacet?: boolean\n  } & ConnectOptions\n  /**\n   * We add a secondary sort based on `createdAt` to ensure that results are always returned in the same order when sorting by a non-unique field.\n   * This is because MongoDB does not guarantee the order of results, however in very large datasets this could affect performance.\n   *\n   * Set to `true` to disable this behaviour.\n   */\n  disableFallbackSort?: boolean\n  /** Set to true to disable hinting to MongoDB to use 'id' as index. This is currently done when counting documents for pagination. Disabling this optimization might fix some problems with AWS DocumentDB. Defaults to false */\n  disableIndexHints?: boolean\n  /**\n   * Set to `true` to ensure that indexes are ready before completing connection.\n   * NOTE: not recommended for production. This can slow down the initialization of Payload.\n   */\n  ensureIndexes?: boolean\n  migrationDir?: string\n  /**\n   * typed as any to avoid dependency\n   */\n  mongoMemoryServer?: MongoMemoryReplSet\n  prodMigrations?: Migration[]\n\n  transactionOptions?: false | TransactionOptions\n\n  /** The URL to connect to MongoDB or false to start payload and prevent connecting */\n  url: false | string\n\n  /**\n   * Set to `true` to use an alternative `dropDatabase` implementation that calls `collection.deleteMany({})` on every collection instead of sending a raw `dropDatabase` command.\n   * Payload only uses `dropDatabase` for testing purposes.\n   * @default false\n   */\n  useAlternativeDropDatabase?: boolean\n  /**\n   * Set to `true` to use `BigInt` for custom ID fields of type `'number'`.\n   * Useful for databases that don't support `double` or `int32` IDs.\n   * @default false\n   */\n  useBigIntForNumberIDs?: boolean\n  /**\n   * Set to `false` to disable join aggregations (which use correlated subqueries) and instead populate join fields via multiple `find` queries.\n   * @default true\n   */\n  useJoinAggregations?: boolean\n  /**\n   * Set to `false` to disable the use of `pipeline` in the `$lookup` aggregation in sorting.\n   * @default true\n   */\n  usePipelineInSortLookup?: boolean\n}\n\nexport type MongooseAdapter = {\n  collections: {\n    [slug: string]: CollectionModel\n  }\n  connection: Connection\n  ensureIndexes: boolean\n  globals: GlobalModel\n  mongoMemoryServer: MongoMemoryReplSet\n  prodMigrations?: {\n    down: (args: MigrateDownArgs) => Promise<void>\n    name: string\n    up: (args: MigrateUpArgs) => Promise<void>\n  }[]\n  sessions: Record<number | string, ClientSession>\n  useAlternativeDropDatabase: boolean\n  useBigIntForNumberIDs: boolean\n  useJoinAggregations: boolean\n  usePipelineInSortLookup: boolean\n  versions: {\n    [slug: string]: CollectionModel\n  }\n} & Args &\n  BaseDatabaseAdapter\n\ndeclare module 'payload' {\n  export interface DatabaseAdapter\n    extends Omit<BaseDatabaseAdapter, 'sessions'>,\n      Omit<Args, 'migrationDir'> {\n    collections: {\n      [slug: string]: CollectionModel\n    }\n    connection: Connection\n    ensureIndexes: boolean\n    globals: GlobalModel\n    mongoMemoryServer: MongoMemoryReplSet\n    prodMigrations?: {\n      down: (args: MigrateDownArgs) => Promise<void>\n      name: string\n      up: (args: MigrateUpArgs) => Promise<void>\n    }[]\n    sessions: Record<number | string, ClientSession>\n    transactionOptions: TransactionOptions\n    updateGlobal: <T extends Record<string, unknown>>(\n      args: { options?: QueryOptions } & UpdateGlobalArgs<T>,\n    ) => Promise<T>\n    updateGlobalVersion: <T extends TypeWithID = TypeWithID>(\n      args: { options?: QueryOptions } & UpdateGlobalVersionArgs<T>,\n    ) => Promise<TypeWithVersion<T>>\n\n    updateOne: (args: { options?: QueryOptions } & UpdateOneArgs) => Promise<Document>\n    updateVersion: <T extends TypeWithID = TypeWithID>(\n      args: { options?: QueryOptions } & UpdateVersionArgs<T>,\n    ) => Promise<TypeWithVersion<T>>\n    useAlternativeDropDatabase: boolean\n    useBigIntForNumberIDs: boolean\n    useJoinAggregations: boolean\n    usePipelineInSortLookup: boolean\n    versions: {\n      [slug: string]: CollectionModel\n    }\n  }\n}\n\nexport function mongooseAdapter({\n  allowAdditionalKeys = false,\n  allowIDOnCreate = false,\n  autoPluralization = true,\n  collectionsSchemaOptions = {},\n  connectOptions,\n  disableFallbackSort = false,\n  disableIndexHints = false,\n  ensureIndexes = false,\n  migrationDir: migrationDirArg,\n  mongoMemoryServer,\n  prodMigrations,\n  transactionOptions = {},\n  url,\n  useAlternativeDropDatabase = false,\n  useBigIntForNumberIDs = false,\n  useJoinAggregations = true,\n  usePipelineInSortLookup = true,\n}: Args): DatabaseAdapterObj {\n  function adapter({ payload }: { payload: Payload }) {\n    const migrationDir = findMigrationDir(migrationDirArg)\n    mongoose.set('strictQuery', false)\n\n    return createDatabaseAdapter<MongooseAdapter>({\n      name: 'mongoose',\n\n      // Mongoose-specific\n      autoPluralization,\n      collections: {},\n      // @ts-expect-error initialize without a connection\n      connection: undefined,\n      connectOptions: connectOptions || {},\n      disableIndexHints,\n      ensureIndexes,\n      // @ts-expect-error don't have globals model yet\n      globals: undefined,\n      // @ts-expect-error Should not be required\n      mongoMemoryServer,\n      sessions: {},\n      transactionOptions: transactionOptions === false ? undefined : transactionOptions,\n      updateJobs,\n      updateMany,\n      url,\n      versions: {},\n      // DatabaseAdapter\n      allowAdditionalKeys,\n      allowIDOnCreate,\n      beginTransaction: transactionOptions === false ? defaultBeginTransaction() : beginTransaction,\n      collectionsSchemaOptions,\n      commitTransaction,\n      connect,\n      count,\n      countGlobalVersions,\n      countVersions,\n      create,\n      createGlobal,\n      createGlobalVersion,\n      createMigration,\n      createVersion,\n      defaultIDType: 'text',\n      deleteMany,\n      deleteOne,\n      deleteVersions,\n      destroy,\n      disableFallbackSort,\n      find,\n      findDistinct,\n      findGlobal,\n      findGlobalVersions,\n      findOne,\n      findVersions,\n      init,\n      migrateFresh,\n      migrationDir,\n      packageName: '@payloadcms/db-mongodb',\n      payload,\n      prodMigrations,\n      queryDrafts,\n      rollbackTransaction,\n      updateGlobal,\n      updateGlobalVersion,\n      updateOne,\n      updateVersion,\n      upsert,\n      useAlternativeDropDatabase,\n      useBigIntForNumberIDs,\n      useJoinAggregations,\n      usePipelineInSortLookup,\n    })\n  }\n\n  return {\n    name: 'mongoose',\n    allowIDOnCreate,\n    defaultIDType: 'text',\n    init: adapter,\n  }\n}\n\nexport { compatibilityOptions } from './utilities/compatibilityOptions.js'\n\n/**\n * Attempt to find migrations directory.\n *\n * Checks for the following directories in order:\n * - `migrationDir` argument from Payload config\n * - `src/migrations`\n * - `dist/migrations`\n * - `migrations`\n *\n * Defaults to `src/migrations`\n *\n * @param migrationDir\n * @returns\n */\nfunction findMigrationDir(migrationDir?: string): string {\n  const cwd = process.cwd()\n  const srcDir = path.resolve(cwd, 'src/migrations')\n  const distDir = path.resolve(cwd, 'dist/migrations')\n  const relativeMigrations = path.resolve(cwd, 'migrations')\n\n  // Use arg if provided\n  if (migrationDir) {\n    return migrationDir\n  }\n\n  // Check other common locations\n  if (fs.existsSync(srcDir)) {\n    return srcDir\n  }\n\n  if (fs.existsSync(distDir)) {\n    return distDir\n  }\n\n  if (fs.existsSync(relativeMigrations)) {\n    return relativeMigrations\n  }\n\n  return srcDir\n}\n"],"names":["fs","mongoose","path","createDatabaseAdapter","defaultBeginTransaction","connect","count","countGlobalVersions","countVersions","create","createGlobal","createGlobalVersion","createMigration","createVersion","deleteMany","deleteOne","deleteVersions","destroy","find","findDistinct","findGlobal","findGlobalVersions","findOne","findVersions","init","migrateFresh","queryDrafts","beginTransaction","commitTransaction","rollbackTransaction","updateGlobal","updateGlobalVersion","updateJobs","updateMany","updateOne","updateVersion","upsert","mongooseAdapter","allowAdditionalKeys","allowIDOnCreate","autoPluralization","collectionsSchemaOptions","connectOptions","disableFallbackSort","disableIndexHints","ensureIndexes","migrationDir","migrationDirArg","mongoMemoryServer","prodMigrations","transactionOptions","url","useAlternativeDropDatabase","useBigIntForNumberIDs","useJoinAggregations","usePipelineInSortLookup","adapter","payload","findMigrationDir","set","name","collections","connection","undefined","globals","sessions","versions","defaultIDType","packageName","compatibilityOptions","cwd","process","srcDir","resolve","distDir","relativeMigrations","existsSync"],"mappings":"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"}