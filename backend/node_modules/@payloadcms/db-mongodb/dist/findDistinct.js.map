{"version":3,"sources":["../src/findDistinct.ts"],"sourcesContent":["import type { PipelineStage } from 'mongoose'\nimport type { FindDistinct, FlattenedField } from 'payload'\n\nimport { getFieldByPath } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { buildSortParam } from './queries/buildSortParam.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\n\nexport const findDistinct: FindDistinct = async function (this: MongooseAdapter, args) {\n  const { collectionConfig, Model } = getCollection({\n    adapter: this,\n    collectionSlug: args.collection,\n  })\n\n  const session = await getSession(this, args.req)\n\n  const { where = {} } = args\n\n  let sortAggregation: PipelineStage[] = []\n\n  const sort = buildSortParam({\n    adapter: this,\n    config: this.payload.config,\n    fields: collectionConfig.flattenedFields,\n    locale: args.locale,\n    sort: args.sort ?? args.field,\n    sortAggregation,\n    timestamps: true,\n  })\n\n  const query = await buildQuery({\n    adapter: this,\n    collectionSlug: args.collection,\n    fields: collectionConfig.flattenedFields,\n    locale: args.locale,\n    where,\n  })\n\n  const fieldPathResult = getFieldByPath({\n    config: this.payload.config,\n    fields: collectionConfig.flattenedFields,\n    includeRelationships: true,\n    path: args.field,\n  })\n  let fieldPath = args.field\n  if (fieldPathResult?.pathHasLocalized && args.locale) {\n    fieldPath = fieldPathResult.localizedPath.replace('<locale>', args.locale)\n  }\n\n  const page = args.page || 1\n\n  let sortProperty = Object.keys(sort)[0]! // assert because buildSortParam always returns at least 1 key.\n  const sortDirection = sort[sortProperty] === 'asc' ? 1 : -1\n\n  let currentFields = collectionConfig.flattenedFields\n  let foundField: FlattenedField | null = null\n\n  let rels: {\n    fieldPath: string\n    relationTo: string\n  }[] = []\n\n  let tempPath = ''\n  let insideRelation = false\n\n  const segments = args.field.split('.')\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i]\n    const field = currentFields.find((e) => e.name === segment)\n    if (rels.length) {\n      insideRelation = true\n    }\n\n    if (!field) {\n      break\n    }\n\n    if (tempPath) {\n      tempPath = `${tempPath}.${field.name}`\n    } else {\n      tempPath = field.name\n    }\n\n    if ('flattenedFields' in field) {\n      currentFields = field.flattenedFields\n      continue\n    }\n\n    if (\n      (field.type === 'relationship' || field.type === 'upload') &&\n      typeof field.relationTo === 'string'\n    ) {\n      if (i === segments.length - 2 && segments[i + 1] === 'id') {\n        foundField = field\n        fieldPath = tempPath\n        break\n      }\n      rels.push({ fieldPath: tempPath, relationTo: field.relationTo })\n      currentFields = this.payload.collections[field.relationTo]?.config\n        .flattenedFields as FlattenedField[]\n      continue\n    }\n    foundField = field\n  }\n\n  const resolvedField = foundField || fieldPathResult?.field\n  const isHasManyValue = resolvedField && 'hasMany' in resolvedField && resolvedField\n\n  let relationLookup: null | PipelineStage[] = null\n\n  if (!insideRelation) {\n    rels = []\n  }\n\n  if (rels.length) {\n    if (sortProperty.startsWith('_')) {\n      const sortWithoutRelationPrefix = sortProperty.replace(/^_+/, '')\n      const lastFieldPath = rels.at(-1)?.fieldPath as string\n      if (sortWithoutRelationPrefix.startsWith(lastFieldPath)) {\n        sortProperty = sortWithoutRelationPrefix\n      }\n    }\n    relationLookup = rels.reduce<PipelineStage[]>((acc, { fieldPath, relationTo }) => {\n      sortAggregation = sortAggregation.filter((each) => {\n        if ('$lookup' in each && each.$lookup.as.replace(/^_+/, '') === fieldPath) {\n          return false\n        }\n\n        return true\n      })\n      const { Model: foreignModel } = getCollection({ adapter: this, collectionSlug: relationTo })\n      acc.push({\n        $lookup: {\n          as: fieldPath,\n          foreignField: '_id',\n          from: foreignModel.collection.name,\n          localField: fieldPath,\n        },\n      })\n      acc.push({ $unwind: `$${fieldPath}` })\n      return acc\n    }, [])\n  }\n\n  let $unwind: any = ''\n  let $group: any = null\n  if (\n    isHasManyValue &&\n    sortAggregation.length &&\n    sortAggregation[0] &&\n    '$lookup' in sortAggregation[0]\n  ) {\n    $unwind = { path: `$${sortAggregation[0].$lookup.as}`, preserveNullAndEmptyArrays: true }\n    $group = {\n      _id: {\n        _field: `$${sortAggregation[0].$lookup.as}._id`,\n        _sort: `$${sortProperty}`,\n      },\n    }\n  } else if (isHasManyValue) {\n    $unwind = { path: `$${args.field}`, preserveNullAndEmptyArrays: true }\n  }\n\n  if (!$group) {\n    $group = {\n      _id: {\n        _field: `$${fieldPath}`,\n        ...(sortProperty === fieldPath\n          ? {}\n          : {\n              _sort: `$${sortProperty}`,\n            }),\n      },\n    }\n  }\n\n  const pipeline: PipelineStage[] = [\n    {\n      $match: query,\n    },\n    ...(sortAggregation.length > 0 ? sortAggregation : []),\n    ...(relationLookup?.length ? relationLookup : []),\n    ...($unwind\n      ? [\n          {\n            $unwind,\n          },\n        ]\n      : []),\n    {\n      $group,\n    },\n    {\n      $sort: {\n        [sortProperty === fieldPath ? '_id._field' : '_id._sort']: sortDirection,\n      },\n    },\n  ]\n\n  const getValues = async () => {\n    return Model.aggregate(pipeline, { session }).then((res) =>\n      res.map((each) => ({\n        [args.field]: JSON.parse(JSON.stringify(each._id._field)),\n      })),\n    )\n  }\n\n  if (args.limit) {\n    pipeline.push({\n      $skip: (page - 1) * args.limit,\n    })\n    pipeline.push({ $limit: args.limit })\n    const totalDocs = await Model.aggregate(\n      [\n        {\n          $match: query,\n        },\n        {\n          $group: {\n            _id: `$${fieldPath}`,\n          },\n        },\n        { $count: 'count' },\n      ],\n      {\n        session,\n      },\n    ).then((res) => res[0]?.count ?? 0)\n    const totalPages = Math.ceil(totalDocs / args.limit)\n    const hasPrevPage = page > 1\n    const hasNextPage = totalPages > page\n    const pagingCounter = (page - 1) * args.limit + 1\n\n    return {\n      hasNextPage,\n      hasPrevPage,\n      limit: args.limit,\n      nextPage: hasNextPage ? page + 1 : null,\n      page,\n      pagingCounter,\n      prevPage: hasPrevPage ? page - 1 : null,\n      totalDocs,\n      totalPages,\n      values: await getValues(),\n    }\n  }\n\n  const values = await getValues()\n\n  return {\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 0,\n    page: 1,\n    pagingCounter: 1,\n    totalDocs: values.length,\n    totalPages: 1,\n    values,\n  }\n}\n"],"names":["getFieldByPath","buildQuery","buildSortParam","getCollection","getSession","findDistinct","args","collectionConfig","Model","adapter","collectionSlug","collection","session","req","where","sortAggregation","sort","config","payload","fields","flattenedFields","locale","field","timestamps","query","fieldPathResult","includeRelationships","path","fieldPath","pathHasLocalized","localizedPath","replace","page","sortProperty","Object","keys","sortDirection","currentFields","foundField","rels","tempPath","insideRelation","segments","split","i","length","segment","find","e","name","type","relationTo","push","collections","resolvedField","isHasManyValue","relationLookup","startsWith","sortWithoutRelationPrefix","lastFieldPath","at","reduce","acc","filter","each","$lookup","as","foreignModel","foreignField","from","localField","$unwind","$group","preserveNullAndEmptyArrays","_id","_field","_sort","pipeline","$match","$sort","getValues","aggregate","then","res","map","JSON","parse","stringify","limit","$skip","$limit","totalDocs","$count","count","totalPages","Math","ceil","hasPrevPage","hasNextPage","pagingCounter","nextPage","prevPage","values"],"mappings":"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"}